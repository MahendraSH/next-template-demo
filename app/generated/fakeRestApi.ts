/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * FakeRESTApi.Web V1
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customInstance } from '../../lib/axios-instance';
import type { ErrorType } from '../../lib/axios-instance';
export interface Activity {
  id?: number;
  /** @nullable */
  title?: string | null;
  dueDate?: string;
  completed?: boolean;
}

export interface Author {
  id?: number;
  idBook?: number;
  /** @nullable */
  firstName?: string | null;
  /** @nullable */
  lastName?: string | null;
}

export interface Book {
  id?: number;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  description?: string | null;
  pageCount?: number;
  /** @nullable */
  excerpt?: string | null;
  publishDate?: string;
}

export interface CoverPhoto {
  id?: number;
  idBook?: number;
  /** @nullable */
  url?: string | null;
}

export interface User {
  id?: number;
  /** @nullable */
  userName?: string | null;
  /** @nullable */
  password?: string | null;
}

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getApiV1Activities = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Activity[]>(
      {url: `/api/v1/Activities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1ActivitiesQueryKey = () => {
    return [`/api/v1/Activities`] as const;
    }

    
export const getGetApiV1ActivitiesQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Activities>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Activities>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ActivitiesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Activities>>> = ({ signal }) => getApiV1Activities(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Activities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ActivitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Activities>>>
export type GetApiV1ActivitiesQueryError = ErrorType<unknown>


export function useGetApiV1Activities<TData = Awaited<ReturnType<typeof getApiV1Activities>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Activities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Activities>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Activities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Activities<TData = Awaited<ReturnType<typeof getApiV1Activities>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Activities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Activities>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Activities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Activities<TData = Awaited<ReturnType<typeof getApiV1Activities>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Activities>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1Activities<TData = Awaited<ReturnType<typeof getApiV1Activities>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Activities>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ActivitiesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiV1Activities = (
    activity: Activity,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Activity>(
      {url: `/api/v1/Activities`, method: 'POST',
      headers: {'Content-Type': 'application/json; v=1.0', },
      data: activity, signal
    },
      options);
    }
  


export const getPostApiV1ActivitiesMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Activities>>, TError,{data: Activity}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Activities>>, TError,{data: Activity}, TContext> => {

const mutationKey = ['postApiV1Activities'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Activities>>, {data: Activity}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Activities(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ActivitiesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Activities>>>
    export type PostApiV1ActivitiesMutationBody = Activity
    export type PostApiV1ActivitiesMutationError = ErrorType<unknown>

    export const usePostApiV1Activities = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Activities>>, TError,{data: Activity}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Activities>>,
        TError,
        {data: Activity},
        TContext
      > => {

      const mutationOptions = getPostApiV1ActivitiesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiV1ActivitiesId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Activity>(
      {url: `/api/v1/Activities/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1ActivitiesIdQueryKey = (id?: number,) => {
    return [`/api/v1/Activities/${id}`] as const;
    }

    
export const getGetApiV1ActivitiesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1ActivitiesId>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ActivitiesId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ActivitiesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1ActivitiesId>>> = ({ signal }) => getApiV1ActivitiesId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1ActivitiesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ActivitiesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1ActivitiesId>>>
export type GetApiV1ActivitiesIdQueryError = ErrorType<unknown>


export function useGetApiV1ActivitiesId<TData = Awaited<ReturnType<typeof getApiV1ActivitiesId>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ActivitiesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ActivitiesId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ActivitiesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ActivitiesId<TData = Awaited<ReturnType<typeof getApiV1ActivitiesId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ActivitiesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ActivitiesId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ActivitiesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ActivitiesId<TData = Awaited<ReturnType<typeof getApiV1ActivitiesId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ActivitiesId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1ActivitiesId<TData = Awaited<ReturnType<typeof getApiV1ActivitiesId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ActivitiesId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ActivitiesIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiV1ActivitiesId = (
    id: number,
    activity: Activity,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Activity>(
      {url: `/api/v1/Activities/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json; v=1.0', },
      data: activity
    },
      options);
    }
  


export const getPutApiV1ActivitiesIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1ActivitiesId>>, TError,{id: number;data: Activity}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1ActivitiesId>>, TError,{id: number;data: Activity}, TContext> => {

const mutationKey = ['putApiV1ActivitiesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1ActivitiesId>>, {id: number;data: Activity}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiV1ActivitiesId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1ActivitiesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1ActivitiesId>>>
    export type PutApiV1ActivitiesIdMutationBody = Activity
    export type PutApiV1ActivitiesIdMutationError = ErrorType<unknown>

    export const usePutApiV1ActivitiesId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1ActivitiesId>>, TError,{id: number;data: Activity}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1ActivitiesId>>,
        TError,
        {id: number;data: Activity},
        TContext
      > => {

      const mutationOptions = getPutApiV1ActivitiesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteApiV1ActivitiesId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/Activities/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1ActivitiesIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ActivitiesId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ActivitiesId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteApiV1ActivitiesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1ActivitiesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1ActivitiesId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1ActivitiesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1ActivitiesId>>>
    
    export type DeleteApiV1ActivitiesIdMutationError = ErrorType<unknown>

    export const useDeleteApiV1ActivitiesId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ActivitiesId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1ActivitiesId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1ActivitiesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiV1Authors = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Author[]>(
      {url: `/api/v1/Authors`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1AuthorsQueryKey = () => {
    return [`/api/v1/Authors`] as const;
    }

    
export const getGetApiV1AuthorsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Authors>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Authors>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1AuthorsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Authors>>> = ({ signal }) => getApiV1Authors(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Authors>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1AuthorsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Authors>>>
export type GetApiV1AuthorsQueryError = ErrorType<unknown>


export function useGetApiV1Authors<TData = Awaited<ReturnType<typeof getApiV1Authors>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Authors>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Authors>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Authors>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Authors<TData = Awaited<ReturnType<typeof getApiV1Authors>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Authors>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Authors>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Authors>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Authors<TData = Awaited<ReturnType<typeof getApiV1Authors>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Authors>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1Authors<TData = Awaited<ReturnType<typeof getApiV1Authors>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Authors>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1AuthorsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiV1Authors = (
    author: Author,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Author>(
      {url: `/api/v1/Authors`, method: 'POST',
      headers: {'Content-Type': 'application/json; v=1.0', },
      data: author, signal
    },
      options);
    }
  


export const getPostApiV1AuthorsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Authors>>, TError,{data: Author}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Authors>>, TError,{data: Author}, TContext> => {

const mutationKey = ['postApiV1Authors'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Authors>>, {data: Author}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Authors(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1AuthorsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Authors>>>
    export type PostApiV1AuthorsMutationBody = Author
    export type PostApiV1AuthorsMutationError = ErrorType<unknown>

    export const usePostApiV1Authors = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Authors>>, TError,{data: Author}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Authors>>,
        TError,
        {data: Author},
        TContext
      > => {

      const mutationOptions = getPostApiV1AuthorsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiV1AuthorsAuthorsBooksIdBook = (
    idBook: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Author[]>(
      {url: `/api/v1/Authors/authors/books/${idBook}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1AuthorsAuthorsBooksIdBookQueryKey = (idBook?: number,) => {
    return [`/api/v1/Authors/authors/books/${idBook}`] as const;
    }

    
export const getGetApiV1AuthorsAuthorsBooksIdBookQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>, TError = ErrorType<unknown>>(idBook: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1AuthorsAuthorsBooksIdBookQueryKey(idBook);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>> = ({ signal }) => getApiV1AuthorsAuthorsBooksIdBook(idBook, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(idBook), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1AuthorsAuthorsBooksIdBookQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>>
export type GetApiV1AuthorsAuthorsBooksIdBookQueryError = ErrorType<unknown>


export function useGetApiV1AuthorsAuthorsBooksIdBook<TData = Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>, TError = ErrorType<unknown>>(
 idBook: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>,
          TError,
          Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1AuthorsAuthorsBooksIdBook<TData = Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>, TError = ErrorType<unknown>>(
 idBook: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>,
          TError,
          Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1AuthorsAuthorsBooksIdBook<TData = Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>, TError = ErrorType<unknown>>(
 idBook: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1AuthorsAuthorsBooksIdBook<TData = Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>, TError = ErrorType<unknown>>(
 idBook: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsAuthorsBooksIdBook>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1AuthorsAuthorsBooksIdBookQueryOptions(idBook,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiV1AuthorsId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Author>(
      {url: `/api/v1/Authors/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1AuthorsIdQueryKey = (id?: number,) => {
    return [`/api/v1/Authors/${id}`] as const;
    }

    
export const getGetApiV1AuthorsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1AuthorsId>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1AuthorsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1AuthorsId>>> = ({ signal }) => getApiV1AuthorsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1AuthorsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1AuthorsId>>>
export type GetApiV1AuthorsIdQueryError = ErrorType<unknown>


export function useGetApiV1AuthorsId<TData = Awaited<ReturnType<typeof getApiV1AuthorsId>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1AuthorsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1AuthorsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1AuthorsId<TData = Awaited<ReturnType<typeof getApiV1AuthorsId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1AuthorsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1AuthorsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1AuthorsId<TData = Awaited<ReturnType<typeof getApiV1AuthorsId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1AuthorsId<TData = Awaited<ReturnType<typeof getApiV1AuthorsId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthorsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1AuthorsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiV1AuthorsId = (
    id: number,
    author: Author,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Author>(
      {url: `/api/v1/Authors/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json; v=1.0', },
      data: author
    },
      options);
    }
  


export const getPutApiV1AuthorsIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1AuthorsId>>, TError,{id: number;data: Author}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1AuthorsId>>, TError,{id: number;data: Author}, TContext> => {

const mutationKey = ['putApiV1AuthorsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1AuthorsId>>, {id: number;data: Author}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiV1AuthorsId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1AuthorsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1AuthorsId>>>
    export type PutApiV1AuthorsIdMutationBody = Author
    export type PutApiV1AuthorsIdMutationError = ErrorType<unknown>

    export const usePutApiV1AuthorsId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1AuthorsId>>, TError,{id: number;data: Author}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1AuthorsId>>,
        TError,
        {id: number;data: Author},
        TContext
      > => {

      const mutationOptions = getPutApiV1AuthorsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteApiV1AuthorsId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/Authors/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1AuthorsIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1AuthorsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1AuthorsId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteApiV1AuthorsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1AuthorsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1AuthorsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1AuthorsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1AuthorsId>>>
    
    export type DeleteApiV1AuthorsIdMutationError = ErrorType<unknown>

    export const useDeleteApiV1AuthorsId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1AuthorsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1AuthorsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1AuthorsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiV1Books = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Book[]>(
      {url: `/api/v1/Books`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1BooksQueryKey = () => {
    return [`/api/v1/Books`] as const;
    }

    
export const getGetApiV1BooksQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Books>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Books>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1BooksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Books>>> = ({ signal }) => getApiV1Books(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Books>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1BooksQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Books>>>
export type GetApiV1BooksQueryError = ErrorType<unknown>


export function useGetApiV1Books<TData = Awaited<ReturnType<typeof getApiV1Books>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Books>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Books>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Books>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Books<TData = Awaited<ReturnType<typeof getApiV1Books>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Books>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Books>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Books>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Books<TData = Awaited<ReturnType<typeof getApiV1Books>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Books>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1Books<TData = Awaited<ReturnType<typeof getApiV1Books>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Books>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1BooksQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiV1Books = (
    book: Book,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/Books`, method: 'POST',
      headers: {'Content-Type': 'application/json; v=1.0', },
      data: book, signal
    },
      options);
    }
  


export const getPostApiV1BooksMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Books>>, TError,{data: Book}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Books>>, TError,{data: Book}, TContext> => {

const mutationKey = ['postApiV1Books'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Books>>, {data: Book}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Books(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1BooksMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Books>>>
    export type PostApiV1BooksMutationBody = Book
    export type PostApiV1BooksMutationError = ErrorType<unknown>

    export const usePostApiV1Books = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Books>>, TError,{data: Book}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Books>>,
        TError,
        {data: Book},
        TContext
      > => {

      const mutationOptions = getPostApiV1BooksMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiV1BooksId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Book>(
      {url: `/api/v1/Books/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1BooksIdQueryKey = (id?: number,) => {
    return [`/api/v1/Books/${id}`] as const;
    }

    
export const getGetApiV1BooksIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1BooksId>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1BooksId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1BooksIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1BooksId>>> = ({ signal }) => getApiV1BooksId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1BooksId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1BooksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1BooksId>>>
export type GetApiV1BooksIdQueryError = ErrorType<unknown>


export function useGetApiV1BooksId<TData = Awaited<ReturnType<typeof getApiV1BooksId>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1BooksId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1BooksId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1BooksId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1BooksId<TData = Awaited<ReturnType<typeof getApiV1BooksId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1BooksId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1BooksId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1BooksId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1BooksId<TData = Awaited<ReturnType<typeof getApiV1BooksId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1BooksId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1BooksId<TData = Awaited<ReturnType<typeof getApiV1BooksId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1BooksId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1BooksIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiV1BooksId = (
    id: number,
    book: Book,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/Books/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json; v=1.0', },
      data: book
    },
      options);
    }
  


export const getPutApiV1BooksIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1BooksId>>, TError,{id: number;data: Book}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1BooksId>>, TError,{id: number;data: Book}, TContext> => {

const mutationKey = ['putApiV1BooksId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1BooksId>>, {id: number;data: Book}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiV1BooksId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1BooksIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1BooksId>>>
    export type PutApiV1BooksIdMutationBody = Book
    export type PutApiV1BooksIdMutationError = ErrorType<unknown>

    export const usePutApiV1BooksId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1BooksId>>, TError,{id: number;data: Book}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1BooksId>>,
        TError,
        {id: number;data: Book},
        TContext
      > => {

      const mutationOptions = getPutApiV1BooksIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteApiV1BooksId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/Books/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1BooksIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1BooksId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1BooksId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteApiV1BooksId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1BooksId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1BooksId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1BooksIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1BooksId>>>
    
    export type DeleteApiV1BooksIdMutationError = ErrorType<unknown>

    export const useDeleteApiV1BooksId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1BooksId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1BooksId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1BooksIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiV1CoverPhotos = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CoverPhoto[]>(
      {url: `/api/v1/CoverPhotos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1CoverPhotosQueryKey = () => {
    return [`/api/v1/CoverPhotos`] as const;
    }

    
export const getGetApiV1CoverPhotosQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1CoverPhotos>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CoverPhotosQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1CoverPhotos>>> = ({ signal }) => getApiV1CoverPhotos(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CoverPhotosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1CoverPhotos>>>
export type GetApiV1CoverPhotosQueryError = ErrorType<unknown>


export function useGetApiV1CoverPhotos<TData = Awaited<ReturnType<typeof getApiV1CoverPhotos>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CoverPhotos>>,
          TError,
          Awaited<ReturnType<typeof getApiV1CoverPhotos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CoverPhotos<TData = Awaited<ReturnType<typeof getApiV1CoverPhotos>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CoverPhotos>>,
          TError,
          Awaited<ReturnType<typeof getApiV1CoverPhotos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CoverPhotos<TData = Awaited<ReturnType<typeof getApiV1CoverPhotos>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1CoverPhotos<TData = Awaited<ReturnType<typeof getApiV1CoverPhotos>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1CoverPhotosQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiV1CoverPhotos = (
    coverPhoto: CoverPhoto,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CoverPhoto>(
      {url: `/api/v1/CoverPhotos`, method: 'POST',
      headers: {'Content-Type': 'application/json; v=1.0', },
      data: coverPhoto, signal
    },
      options);
    }
  


export const getPostApiV1CoverPhotosMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1CoverPhotos>>, TError,{data: CoverPhoto}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1CoverPhotos>>, TError,{data: CoverPhoto}, TContext> => {

const mutationKey = ['postApiV1CoverPhotos'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1CoverPhotos>>, {data: CoverPhoto}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1CoverPhotos(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1CoverPhotosMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1CoverPhotos>>>
    export type PostApiV1CoverPhotosMutationBody = CoverPhoto
    export type PostApiV1CoverPhotosMutationError = ErrorType<unknown>

    export const usePostApiV1CoverPhotos = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1CoverPhotos>>, TError,{data: CoverPhoto}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1CoverPhotos>>,
        TError,
        {data: CoverPhoto},
        TContext
      > => {

      const mutationOptions = getPostApiV1CoverPhotosMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiV1CoverPhotosBooksCoversIdBook = (
    idBook: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CoverPhoto[]>(
      {url: `/api/v1/CoverPhotos/books/covers/${idBook}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1CoverPhotosBooksCoversIdBookQueryKey = (idBook?: number,) => {
    return [`/api/v1/CoverPhotos/books/covers/${idBook}`] as const;
    }

    
export const getGetApiV1CoverPhotosBooksCoversIdBookQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>, TError = ErrorType<unknown>>(idBook: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CoverPhotosBooksCoversIdBookQueryKey(idBook);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>> = ({ signal }) => getApiV1CoverPhotosBooksCoversIdBook(idBook, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(idBook), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CoverPhotosBooksCoversIdBookQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>>
export type GetApiV1CoverPhotosBooksCoversIdBookQueryError = ErrorType<unknown>


export function useGetApiV1CoverPhotosBooksCoversIdBook<TData = Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>, TError = ErrorType<unknown>>(
 idBook: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>,
          TError,
          Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CoverPhotosBooksCoversIdBook<TData = Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>, TError = ErrorType<unknown>>(
 idBook: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>,
          TError,
          Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CoverPhotosBooksCoversIdBook<TData = Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>, TError = ErrorType<unknown>>(
 idBook: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1CoverPhotosBooksCoversIdBook<TData = Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>, TError = ErrorType<unknown>>(
 idBook: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosBooksCoversIdBook>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1CoverPhotosBooksCoversIdBookQueryOptions(idBook,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiV1CoverPhotosId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CoverPhoto>(
      {url: `/api/v1/CoverPhotos/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1CoverPhotosIdQueryKey = (id?: number,) => {
    return [`/api/v1/CoverPhotos/${id}`] as const;
    }

    
export const getGetApiV1CoverPhotosIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1CoverPhotosId>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CoverPhotosIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1CoverPhotosId>>> = ({ signal }) => getApiV1CoverPhotosId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CoverPhotosIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1CoverPhotosId>>>
export type GetApiV1CoverPhotosIdQueryError = ErrorType<unknown>


export function useGetApiV1CoverPhotosId<TData = Awaited<ReturnType<typeof getApiV1CoverPhotosId>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CoverPhotosId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1CoverPhotosId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CoverPhotosId<TData = Awaited<ReturnType<typeof getApiV1CoverPhotosId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CoverPhotosId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1CoverPhotosId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CoverPhotosId<TData = Awaited<ReturnType<typeof getApiV1CoverPhotosId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1CoverPhotosId<TData = Awaited<ReturnType<typeof getApiV1CoverPhotosId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CoverPhotosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1CoverPhotosIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiV1CoverPhotosId = (
    id: number,
    coverPhoto: CoverPhoto,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CoverPhoto>(
      {url: `/api/v1/CoverPhotos/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json; v=1.0', },
      data: coverPhoto
    },
      options);
    }
  


export const getPutApiV1CoverPhotosIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1CoverPhotosId>>, TError,{id: number;data: CoverPhoto}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1CoverPhotosId>>, TError,{id: number;data: CoverPhoto}, TContext> => {

const mutationKey = ['putApiV1CoverPhotosId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1CoverPhotosId>>, {id: number;data: CoverPhoto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiV1CoverPhotosId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1CoverPhotosIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1CoverPhotosId>>>
    export type PutApiV1CoverPhotosIdMutationBody = CoverPhoto
    export type PutApiV1CoverPhotosIdMutationError = ErrorType<unknown>

    export const usePutApiV1CoverPhotosId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1CoverPhotosId>>, TError,{id: number;data: CoverPhoto}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1CoverPhotosId>>,
        TError,
        {id: number;data: CoverPhoto},
        TContext
      > => {

      const mutationOptions = getPutApiV1CoverPhotosIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteApiV1CoverPhotosId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/CoverPhotos/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1CoverPhotosIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CoverPhotosId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CoverPhotosId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteApiV1CoverPhotosId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1CoverPhotosId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1CoverPhotosId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1CoverPhotosIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1CoverPhotosId>>>
    
    export type DeleteApiV1CoverPhotosIdMutationError = ErrorType<unknown>

    export const useDeleteApiV1CoverPhotosId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CoverPhotosId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1CoverPhotosId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1CoverPhotosIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiV1Users = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User[]>(
      {url: `/api/v1/Users`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1UsersQueryKey = () => {
    return [`/api/v1/Users`] as const;
    }

    
export const getGetApiV1UsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Users>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1UsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Users>>> = ({ signal }) => getApiV1Users(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1UsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Users>>>
export type GetApiV1UsersQueryError = ErrorType<unknown>


export function useGetApiV1Users<TData = Awaited<ReturnType<typeof getApiV1Users>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Users>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Users>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Users<TData = Awaited<ReturnType<typeof getApiV1Users>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Users>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Users>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Users<TData = Awaited<ReturnType<typeof getApiV1Users>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1Users<TData = Awaited<ReturnType<typeof getApiV1Users>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1UsersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiV1Users = (
    user: User,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/Users`, method: 'POST',
      headers: {'Content-Type': 'application/json; v=1.0', },
      data: user, signal
    },
      options);
    }
  


export const getPostApiV1UsersMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Users>>, TError,{data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Users>>, TError,{data: User}, TContext> => {

const mutationKey = ['postApiV1Users'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Users>>, {data: User}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Users(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1UsersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Users>>>
    export type PostApiV1UsersMutationBody = User
    export type PostApiV1UsersMutationError = ErrorType<unknown>

    export const usePostApiV1Users = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Users>>, TError,{data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Users>>,
        TError,
        {data: User},
        TContext
      > => {

      const mutationOptions = getPostApiV1UsersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiV1UsersId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/Users/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1UsersIdQueryKey = (id?: number,) => {
    return [`/api/v1/Users/${id}`] as const;
    }

    
export const getGetApiV1UsersIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1UsersId>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1UsersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersId>>> = ({ signal }) => getApiV1UsersId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1UsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1UsersId>>>
export type GetApiV1UsersIdQueryError = ErrorType<unknown>


export function useGetApiV1UsersId<TData = Awaited<ReturnType<typeof getApiV1UsersId>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1UsersId<TData = Awaited<ReturnType<typeof getApiV1UsersId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1UsersId<TData = Awaited<ReturnType<typeof getApiV1UsersId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1UsersId<TData = Awaited<ReturnType<typeof getApiV1UsersId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1UsersIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiV1UsersId = (
    id: number,
    user: User,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/Users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json; v=1.0', },
      data: user
    },
      options);
    }
  


export const getPutApiV1UsersIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1UsersId>>, TError,{id: number;data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1UsersId>>, TError,{id: number;data: User}, TContext> => {

const mutationKey = ['putApiV1UsersId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1UsersId>>, {id: number;data: User}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiV1UsersId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1UsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1UsersId>>>
    export type PutApiV1UsersIdMutationBody = User
    export type PutApiV1UsersIdMutationError = ErrorType<unknown>

    export const usePutApiV1UsersId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1UsersId>>, TError,{id: number;data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1UsersId>>,
        TError,
        {id: number;data: User},
        TContext
      > => {

      const mutationOptions = getPutApiV1UsersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteApiV1UsersId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/Users/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1UsersIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1UsersId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1UsersId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteApiV1UsersId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1UsersId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1UsersId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1UsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1UsersId>>>
    
    export type DeleteApiV1UsersIdMutationError = ErrorType<unknown>

    export const useDeleteApiV1UsersId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1UsersId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1UsersId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1UsersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
